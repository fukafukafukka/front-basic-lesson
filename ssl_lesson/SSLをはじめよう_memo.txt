# SSLをはじめよう
## 第1章 SSL/TLSとは？
プロトコル。
実際使うとなったときは、このSSL/TLSというプロトコルに従って実装されているソフトウェア(ほとんどがOpenSSL)を使う。
HTTPS≠SSL→HTTPとSSLを組み合わせて使うことでHTTPS(通信が保護されるプロトコル)となる。
HTTPS以外にも、FTPとSSLを組み合わせたFTPS, SMTPとSSLを組み合わせたSMTPSなどある。

HTTPのままだと起きるデメリット
→ 1.「保護されていない通信」という表示がされてしまう。
→ 2.Wi-Fiスポットなどでセッションハイジャックされる恐れがある。
  → ログインページだけがHTTPSのサイトでそれ以外のページを開いた時、CookieにSecure属性が付いていないとCookie（セッションID）が暗号化されずに送信されてしまう。
    → 同じWi-Fiにつないでいる第三者によってセッションIDが盗まれる恐れがあり、なりすましでログインされる恐れがある。
→ 3.GoogleがHTTPS化が進んでいるサイトを検索エンジン上優遇している。
→ 4.HTTPだと、HTTPSの他社サイトから飛んできた場合に、リファラ(利用者が直前に訪問していたサイトの情報)を取得できない。

HTTPS化すると得られるメリット
→ 1.HTTPS化するとHTTP/2というHTTPプロトコルの次期バージョンを利用できるようになり速度向上が期待できる。
→ 2.SameSiteの変更に対応できる。クロスサイトCookieがデフォルトでは使えないようになっていくが、「SameSite=None; Secure」の設定をすることでクロスサイトCookieが引き続き利用できる。
→ 3.重要情報のアタリが付けにくくなる。流れていくデータが全て暗号化されていれば、どれが重要な情報かアタリがつかない。


## Oracle Cloudのアカウントを作ろう
HTTPSのサイトを作るのに必要な材料は以下の3つ。
- ウェブサーバ
- ドメイン名
- SSL証明書
Oracle Cloudには、有効期限無しでずっと無料で使えるAlways Freeがある。

1.OracleCloudに会員登録する。
2.sshキー生成する
3.OracleCloudにサーバーを立てる。（公開鍵を登録する）
4.ログインする
5.nginxをインストールする
6.nginxを自動起動するよう設定
7.サーバー内部のFirewalldでHTTPとHTTPSを許可する（デフォルトではsshしか許可されていない。）
8.サブネットが属するDefault Security Listにおいて、port80と443を許可する。
9.nginxを再起動する。
9.以上により、パブリックIPをブラウザに入力することで表示が可能。
10.取得したドメイン名にAレコードとしてパブリックIPアドレスを紐付ける。
11.ドメイン名がパブリックIPに紐づいているか実際に確認。
12.https対応する。（SSL証明書）


## SSL証明書を使ってHTTPSでサイトを見よう
SSL証明書に関する主な登場人物は以下5点。
 - 秘密鍵
 - CSR（ Certificate Signing Request ）
 - SSL証明書
 - 中間CA証明書
 - SSL証明書+中間CA証明書
次のような流れでSSL証明書を取得して、HTTPSのサイトを作る。
　- サーバで秘密鍵を作る（opensslコマンドを使って秘密鍵を作る。）
　- 秘密鍵からCSR(証明書署名リクエスト)を作る
　- CSRを認証局に渡してSSL証明書の発行を依頼
　- TXTレコードを作ってDNS認証
　- メールでSSL証明書と中間CA証明書が届く
　- SSL証明書と中間CA証明書をサーバにアップして1ファイルにまとめる
　- nginxでHTTPSのバーチャルホストを作る

本書ではウェブサーバにSSL証明書を設置したが、ウェブサーバの手前にロードバランサを置いて、そこにSSL証明書を設置する「SSLターミネーション」という方法もある。その場合は、HTTPSで通信するのはユーザのパソコンから終端となるロードバランサーまでで、ロードバランサーとウェブサーバの間はHTTPで通信するのが一般的。
→ メリット1:ロードバランサーが暗号化や複合の処理を行うので、webサーバの処理負荷が下がる。
→ メリット2:SSL証明書を設置するおはロードバランサの一箇所だけで済む。
AWSのELBとACM(AWS Certificate Manager)を組み合わせて使うと、手作業で行ったSSL証明書の取得や設置、管理をまるごとやってくれる。

TXTレコードとは
- 権威DNSサーバが仕事で使うネタ帳（ゾーンファイル）の中身
  - コメントが書かれている行のこと
  → 丸く言うと、多分ドメイン名とコメント行が書かれたレコードで、これを権威DNSサーバが確認することで、今回であればSSL/TLS通信ができる？
- DNSサーバは以下2種類がある
  - フルサービスリゾルバ
  - 権威DNSサーバ


## 第5章 SSL/TLSの仕組み
### SSL証明書とは
以下2種類ある。
- SSLクライアント証明書
- SSLサーバ証明書

以下3つの仕事をしている
- なりすましを防ぐ→hoge.example.comからのレスポンスページが本当にhoge.example.comのものであるか認証する
- データの改竄を防ぐ→hoge.example.comのウェブサイトで入力した情報がサーバに届くまでに他の情報に書き換えられていないことを確認する。
- 情報の漏洩を防ぐ→サーバへ送信したIDやパスワード、振込先の情報などが第三者に見られないように暗号化して保護する。入出金の明細がサーバからクライアントへ届くまでの間に、第三者に見られないように暗号化して保護する。
※厳密には3つ目の暗号化はSSL証明書そのものの働きではない。暗号化に必要な鍵交換を行う過程でSSL証明書が仕事をしている。

HTTPSの実際の流れ
1.認証を行う。
  1.ブラウザでHTTPSのサイトを開く。（https://ssl.自分のドメイン名/）を開く
  2.クライアントからOracle Cloudのウェブサーバへリクエストを投げる。
  3.サーバがリクエストを受け取る。
  4.サーバが、サーバ内にあるFujiSSLのSSL証明書をレスポンスで返す
    - このSSL証明書は次の2つを指す。
      - SSL証明書本体（公開鍵を含む）
      - 認証極による署名（SSL証明書本体のハッシュ値を認証極の秘密鍵で暗号化したもの）
  5.クライアント側でSSL証明書を受け取って次の5つを行う。
    6.ブラウザのトラストアンカー(信頼する証明書)に含まれている認証局によって発行されたSSL証明書なのか確認
      - これで渡されたSSL証明書を信頼して良いことがわかる。
    7.認証局による署名を、ブラウザのトラストアンカーに含まれる公開鍵で複合して、証明書本体のハッシュ値を取り出す
    8.ハッシュ関数でSSL証明書本体のハッシュ値を出力
    9.取り出したハッシュ値と、自分で出力した値を付き合わせて同一であることを確認する
      - これで渡されたSSL署名書本体が改竄されていないことがわかる。
    10.SSL証明書本体のSANに記載されているFQDN(Fully Qualified Domain Name)と、リクエスト先のFQDN(ssl.自分のドメイン名)が同一でああることを確認
       - これでレスポンスを返してきた相手がなりすましでないことが分かる。

2.DH鍵交換による暗号化通信を行う。
認証が終わると続けてDH鍵交換が行われる。
  1.
  // 省略
  9.
DHの仕組みは以下とかいろいろ調べれば出てくる。
https://milestone-of-se.nesuke.com/nw-basic/tls/diffie-hellman-summary/

SSL証明書と中間CA証明書がwebサーバにあり、それらを証明するルート証明書がブラウザに存在する。

※混在コンテンツ
HTTPSのサイト見に行って、例えばhtml内の画像やYouTubeなどのURLがHTTPで貼られている場合、「このサイトへの接続は完全には保護されていません」という表示が出てしまう。
2020年3月リリースのChromeからは、混在コンテンツが存在した場合、コンテンツがHTTPからHTTPSへ自動的に変更され、さらにHTTPSでの読み込みに失敗すると、そのリソース(http+//で始まる形式にしていたCSSや画像、読み込みコンテンツ)がブロックされる仕組みが予定されている。

※混在コンテンツの直しかた
→例えば、<img src="http+//www.example.com/images/top.png">のようになっていた<img>タグを、<img src="images/top.png">のようにパスの部分だけにする。これならページをHTTPで開いた時は画像もHTTPで、HTTPSで開いた時はHTTPSで表示される。
→あるいは、画像はページとは別のドメイン名と行った時は、<img>タグを、<img src="//images.example.com/images/top.pnt">のようにプロトコルを省略して書くことで、解決できる。→ただGoogle的には非推奨で、HTTPSで接続して構わないんだったら最初から「https://」で書いてほしいらしい。

### SSL証明書はどうしてあんなに値段に差があるの？
DiGiCert&Symantecは219000円、GMOグローバルサインは59800円、FujiSSLは1000円だった。
同じ「SSL証明書」でも3つの種類があるから。簡単に言うと高い・普通・安いの3つ。
- DV証明書→サイトの運営者がそのドメイン名の持ち主であることを証明してくれる。
- CV証明書→サイトを運営する組織が実在することと、本物の組織であることを証明してくれる。
- EV証明書→サイトを運営する法人組織が実在することと、本物の組織であることを証明してくれる。

### 任意のサブドメインで使えるワイルドカード証明書
SSL証明書には「*.example.com」のように任意のサブドメインで使えるワイルドカード証明書という種類がある。本番・ステージング・テスト環境などで1つの証明書を共用できるので便利。
SSL証明書のSANが「*.example.com」のワイルドカード証明書が使えるドメイン名
→www.example.com
→prod.example.com
→stg.example.com
→test.example.com


